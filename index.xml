<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ray</title>
    <link>https://tianhualiang2019.github.io/</link>
    <description>Recent content on Ray</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jun 2019 08:52:04 +0800</lastBuildDate>
    
	<atom:link href="https://tianhualiang2019.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring 应用程序（例子）</title>
      <link>https://tianhualiang2019.github.io/post/firstblog/</link>
      <pubDate>Sat, 08 Jun 2019 08:52:04 +0800</pubDate>
      
      <guid>https://tianhualiang2019.github.io/post/firstblog/</guid>
      <description>Spring 应用程序（例子） POM 创建一个工程名为 hello-spring 的项目，pom.xml 文件如下：
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.funtl&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hello-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.3.17.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/project&amp;gt;  核心包：主要增加了 org.springframework: spring-context 依赖
创建接口与实现 创建 UserService 接口 package com.funtl.hello.spring.service; public interface UserService { public void sayHi(); }  创建 UserServiceImpl 实现 package com.funtl.hello.spring.service.impl; import com.funtl.hello.spring.service.UserService; public class UserServiceImpl implements UserService { public void sayHi() { System.out.println(&amp;quot;Hello Spring&amp;quot;); } }  创建 Spring 配置文件 在 src/main/resources 目录下创建 spring-context.</description>
    </item>
    
    <item>
      <title>SpringBoot入门</title>
      <link>https://tianhualiang2019.github.io/post/springboot%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tianhualiang2019.github.io/post/springboot%E5%85%A5%E9%97%A8/</guid>
      <description>一、SpringBoot入门 1、SpringBoot简介  简化Spring应用开发的一个框架
整个Spring技术栈的一个大整合
javaEE开发的一站式解决方案
2、微服务 2014,martin fowler
 微服务：架构风格（服务微化）
一个应用应该是一组小型服务；可以通过HTTP的方式进行互通
每一个功能元素最终都是一个可独立替换和独立升级的软件单元；
3、SpringBoot HelloWorld 功能：浏览器发送hello请求，服务器接受请求并处理，响应HelloWorld字符串
1、创建一个maven工程；（jar） 2、导入springboot的依赖  &amp;lt;!--SpringBoot的版本仲裁中心，以后我们导入依赖默认是不需要写版本的--&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.5.9.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;!--启动不同类型的项目，导入相应的starter依赖即可，此处是web应用，导入spring-boot-starter-web--&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;  3、编写一个主程序:启动SpringBoot /* * @SpringBootApplication标注一个主程序类，说明这是一个SpringBoot应用。 */ @SpringBootApplication public class HelloWorldApplication { public static void main(String[] args) { //spring应用启动起来，run方法的参数为@SpringBootApplication注解的类。 SpringApplication.run(HelloWorldApplication.class,args); } }  4、编写一个相关的Controller、Service @Controller public class HelloController { @ResponseBody @RequestMapping(&amp;quot;/hello&amp;quot;) public String hello(){ return &amp;quot;Hello World&amp;quot;; } }  直接运行main方法，启动SpringBoot,浏览器发送hello请求，即可访问</description>
    </item>
    
  </channel>
</rss>